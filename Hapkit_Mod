// Includes
#include <math.h>

#include <digitalWriteFast.h>  // library for high performance reads and writes by jrraines
                               // see http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1267553811/0
                               // and http://code.google.com/p/digitalwritefast/

// It turns out that the regular digitalRead() calls are too slow and bring the arduino down when
// I use them in the interrupt routines while the motor runs at full speed.

// Quadrature encoders
// Encoder reading is actually from the cover/label side of encoder so we 
// reverse it in the physical system (instead of pin 2 for Channel A, Channel A connects to Arduino pin 3)
// Channel A is Green Wire | Channel B is Yellow Wire
// Green to pin 3 | Yellow to pin 2

#define c_EncoderInterruptA 0
#define c_EncoderInterruptB 1
#define c_EncoderPinA 2 
#define c_EncoderPinB 3
#define EncoderIsReversed

#define EN 8 
#define PWM1 6                      // PWM generator
#define CLOCKWISE            0       // direction constant
#define COUNTER_CLOCKWISE    1       // direction constant

volatile bool _EncoderASet;
volatile bool _EncoderBSet;
volatile bool _EncoderAPrev;
volatile bool _EncoderBPrev;
volatile long _EncoderTicks = 0;

int Direc = 0;  // Flag for CW/CCW direction
double actualAngle = 0.0; // the actual angle
double encoderCount = 400.0; //number of counts per rotation
double cycle = 360.0; // degrees per full rotation (360 degrees)
int PWMout = 0; // output PWM value to the motor

// Kinematics variables
double arcLength = 0;           // position of the handle [m]

// Force output variables
double force = 0;           // force at the handle
double Torque = 0;              // torque of the motor
double duty = 0;            // duty cylce (between 0 and 255)
unsigned int output = 0;    // output command to the motor

void setup() 
{
  // Set up serial communication
  Serial.begin(57600);  
  pinMode(c_EncoderPinA, INPUT);      // sets pin A as input
  digitalWrite(c_EncoderPinA, LOW);  // turn on pullup resistors
  pinMode(c_EncoderPinB, INPUT);      // sets pin B as input
  digitalWrite(c_EncoderPinB, LOW);  // turn on pullup resistors
  attachInterrupt(c_EncoderInterruptA, HandleMotorInterruptA, CHANGE);
  attachInterrupt(c_EncoderInterruptB, HandleMotorInterruptB, CHANGE);

  pinMode(PWM1, OUTPUT);
//  analogWrite(PWM1, 127);
//  pinMode(EN, OUTPUT);
//  digitalWrite(EN, LOW);
}

// --------------------------------------------------------------
// Main Loop
// --------------------------------------------------------------
void loop()
{
  double radius = 0.065; // meters
  actualAngle = double(_EncoderTicks * (cycle/encoderCount)); // calculate the actual angle based on the present encoderticks
  arcLength = 2 * 3.14159 * radius * (actualAngle/cycle);  // finding the arclength based on a ratio (from degrees) of the circumference

// VIRTUAL SPRING
//double k_spring = 230; //[N/m] 230
//force = -k_spring*arcLength;

// VIRTUAL WALL
     double x_wall = 0.1;
     double k_wall = 1500;
     if(arcLength > x_wall) {
       force = -k_wall*(arcLength-x_wall);
       // force = -30;
     } else {
       force = 0;
     }
     // Torque = radius * force;    // Compute the Torque to generate the desired force
  
  // Compute the duty cycle required to generate the torque
  // duty = sqrt(abs(Torque)/2.0);

  // Make sure the duty cycle is between 0 and 100%
//  if (duty > 1) {            
//    duty = 1;
//  } else if (duty < 0) { 
//    duty = 0;
//  }  

  output = abs(force);  
  // output = (int)(duty * 127);   // convert duty cycle to output signal: DUTY 0 - 100%|0 - 127 PWM
  if (force < 0 ) {
    PWMout = output + 127; // max output (127) -> PWMout = 254 (max PWM CCW)
  } else {
    PWMout = (-1 * output) + 127; // max output (127) -> PWMout = 0 (max PWM CW)
  }

  if (PWMout >= 120 && PWMout <= 126){ // when the pwm value gets too close to 127, it doesn't move
    PWMout = 120;
  }
  if (PWMout >= 128 && PWMout <= 135){
    PWMout = 135;
  }

  analogWrite(PWM1,PWMout);  // output the signal
  
  Serial.print(" A: ");
  Serial.print(actualAngle);
  // Serial.print(" E: ");
  // Serial.print(_EncoderTicks);
  // Serial.print("  Revs: ");
  // Serial.print(_EncoderTicks/400);//400 Counts Per Revolution
  // Serial.print(Direc == CLOCKWISE ? " cw " : " ccw ");
  Serial.print(" arc: ");
  Serial.print(arcLength);
  Serial.print(" F: ");
  Serial.print(force);
  Serial.print(" T: ");
  Serial.print(Torque);
  Serial.print(" D: ");
  Serial.print(duty);
  Serial.print(" P: ");
  Serial.print(PWMout);  
  Serial.print("\n");
}

// ------------------- INTERRUPT FUNCTIONS ------------------------ // 

// Interrupt service routines for Channel A Rising/Falling edge
void HandleMotorInterruptA(){
  _EncoderBSet = digitalReadFast(c_EncoderPinB);
  _EncoderASet = digitalReadFast(c_EncoderPinA);
  
  _EncoderTicks+=ParseEncoder();

  if (_EncoderTicks >= 400 || _EncoderTicks <= -400){
    _EncoderTicks = 0;
  }
  
  _EncoderAPrev = _EncoderASet;
  _EncoderBPrev = _EncoderBSet;
}

// Interrupt service routines for Channel B Rising/Falling edge
void HandleMotorInterruptB(){
  // Test transition;
  _EncoderBSet = digitalReadFast(c_EncoderPinB);
  _EncoderASet = digitalReadFast(c_EncoderPinA);
  
  _EncoderTicks+=ParseEncoder();

  if (_EncoderTicks >= 400 || _EncoderTicks <= -400){
    _EncoderTicks = 0;
  }
  
  _EncoderAPrev = _EncoderASet;
  _EncoderBPrev = _EncoderBSet;
}

int ParseEncoder(){
  if(_EncoderAPrev && _EncoderBPrev){
    if(!_EncoderASet && _EncoderBSet) {
      Direc = CLOCKWISE;  
      return 1;
    }
    if(_EncoderASet && !_EncoderBSet){
      Direc = COUNTER_CLOCKWISE;  
      return -1;
    }
  }else if(!_EncoderAPrev && _EncoderBPrev){
    if(!_EncoderASet && !_EncoderBSet) {
      Direc = CLOCKWISE;  
      return 1;
    }
    if(_EncoderASet && _EncoderBSet) {
      Direc = COUNTER_CLOCKWISE;  
      return -1;
    }
  }else if(!_EncoderAPrev && !_EncoderBPrev){
    if(_EncoderASet && !_EncoderBSet) {
      Direc = CLOCKWISE;  
      return 1;
    }
    if(!_EncoderASet && _EncoderBSet) {
      Direc = COUNTER_CLOCKWISE;  
      return -1;
    }
  }else if(_EncoderAPrev && !_EncoderBPrev){
    if(_EncoderASet && _EncoderBSet) {
      Direc = CLOCKWISE;  
      return 1;
    }
    if(!_EncoderASet && !_EncoderBSet) {
      Direc = COUNTER_CLOCKWISE;  
      return -1;
    }
  }
}

// --------------------------------------------------------------
// Function to set PWM Freq -- DO NOT EDIT
// --------------------------------------------------------------
void setPwmFrequency(int pin, int divisor) {
  byte mode;
  if(pin == 5 || pin == 6 || pin == 9 || pin == 10) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 64: mode = 0x03; break;
      case 256: mode = 0x04; break;
      case 1024: mode = 0x05; break;
      default: return;
    }
    if(pin == 5 || pin == 6) {
      TCCR0B = TCCR0B & 0b11111000 | mode;
    } else {
      TCCR1B = TCCR1B & 0b11111000 | mode;
    }
  } else if(pin == 3 || pin == 11) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 32: mode = 0x03; break;
      case 64: mode = 0x04; break;
      case 128: mode = 0x05; break;
      case 256: mode = 0x06; break;
      case 1024: mode = 0x7; break;
      default: return;
    }
    TCCR2B = TCCR2B & 0b11111000 | mode;
  }
}

